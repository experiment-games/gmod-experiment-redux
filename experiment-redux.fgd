//==========================================================================//
//      Defines entities and available keyvalues for Experiment Redux:      //
//          https://github.com/experiment-games/gmod-experiment-redux       //
//==========================================================================//
@include "base.fgd"

@PointClass base(prop_static) color(160 78 69) sphere(fademindist) sphere(fademaxdist) studioprop() = exp_monitor_static :
	"Experiment Monitor that matches the position and angles of a prop_static with the same model"
[
    monitorPreset(string) : "Monitor Preset" : "combine_big" : "Preset used to determine the monitor's screen size"
]

@PointClass base(Origin, Angles) color(160 78 69) sphere(fademindist) sphere(fademaxdist) studioprop() = exp_scavenging_source :
    "Scavenging Source where players can scavenge for items"
[
    model(studio) : "World model" : "models/props_junk/trashcluster01a.mdl" : "Model of the source"
    inventoryType(string) : "Inventory Type" : "scavenging:base" : "Type of inventory this source will provide"
    sourceName(string) : "Source Name" : "" : "Name of the source"
    invisible(boolean) : "Invisible" : 0 : "Whether the source is invisible"
]

@PointClass base(Origin, Angles) color(160 78 69) sphere(fademindist) sphere(fademaxdist) studioprop() = exp_lockers :
    "Lockers where players can permanently store items"
[
    model(studio) : "World model" : "models/props_c17/lockers001a.mdl" : "Model of the lockers"
]

@PointClass base(Angles) studio("models/editor/playerstart.mdl") = exp_spawn_point :
	"This entity indicates the position and facing direction at which the player can choose to spawn."
[
    name(string) : "Name" : "" : "Name of the spawn point"
    status(integer) : "Override Status" : -1 : "Override the status of the spawn point (-1 = don't override, 0 = safe, 1 = danger, 2 = locked, 3 = chaos)"
]

@PointClass base(Angles) studio("models/editor/scriptedsequence.mdl") = exp_npc :
    "Entity that represents an NPC in the world"
[
    npcId(string) : "NPC UniqueID" : "" : "Unique ID of the NPC"
]

@PointClass base(Angles) studio("models/experiment-redux/shopkeeper.mdl") = exp_shopkeeper :
    "Shopkeeper where players can buy and sell items"
[
]

@PointClass base(Angles) studio("models/editor/scriptedsequence.mdl") = exp_monster_spawner :
    "Marks a position where monsters can spawn"
[
    monsterClasses(string) : "Monster Class(es)" : "" : "Classes of the monster to spawn (separated by commas if multiple)"
    monsterMax(integer) : "Monster Max" : 1 : "Number of monsters to spawn at most from this spawner"
    monsterSpawnDelay(float) : "Monster Spawn Delay" : 10 : "Delay between monster spawns in seconds"
    monsterSpawnRadius(float) : "Monster Spawn Radius" : 0 : "Radius around the spawner where monsters can spawn"
]

// Attribute Training plugin entity
@PointClass base(Angles) studio("models/props_phx/construct/metal_plate_curve360.mdl") = exp_target_practice_spawn :
    "Entity that represents a spawn point for a target in the target practice attribute training"
[
]

// Brush entity to mark this area as a 'non-entity' area, such that items, belongings and corpses are removed from it.
// This is to prevent doors or obstacles getting blocked.
@SolidClass base(Trigger, Targetname) = exp_non_entity_area :
    "Area where entities like items, belongings and corpses are removed from"
[
    teleportTarget(target_destination) : "Teleport Target" : "" : "Target to teleport entities to when they enter this area"
]

// Brush entity to mark a trigger that counts players wanting to start a certain obstacle course.
@SolidClass base(Trigger, Targetname) = exp_obstacle_course_start :
    "Trigger that counts players wanting to start a certain obstacle course"
[
    courseID(string) : "Obstacle Course ID" : "" : "ID of the obstacle course this trigger is associated with"
]

// Brush entity to mark a trigger that has a player finish a certain obstacle course.
@SolidClass base(Trigger, Targetname) = exp_obstacle_course_finish :
    "Trigger that has a player finish a certain obstacle course"
[
    courseID(string) : "Obstacle Course ID" : "" : "ID of the obstacle course this trigger is associated with"
]

// Brush entity to mark a trigger that has a player clear a certain obstacle course. Place this behind the finish.
// Used to prevent players from coming through to the end the wrong way around.
@SolidClass base(Trigger, Targetname) = exp_obstacle_course_clear :
    "Trigger that has a player clear a certain obstacle course"
[
    courseID(string) : "Obstacle Course ID" : "" : "ID of the obstacle course this trigger is associated with"
]
